<%= flash_messages %>

<%  track_ids = [] %>
<%  track_id_string = "" %>
<%  @playlist.tracks.each do |track| %>
<%    track_id_string.concat("spotify:track:") %>
<%    track_id_string.concat(track.spotify_id) %>
<%    track_ids.append(track_id_string) %>
<%    track_id_string = "" %>
<%  end %>

<head>
  <title>Spotify Web Playback SDK Quick Start Tutorial</title>
</head>
<body>
  <h1>Spotify Web Playback SDK Quick Start Tutorial</h1>
  <h2>Open your console log: <code>View > Developer > JavaScript Console</code></h2>

  <script src="https://sdk.scdn.co/spotify-player.js"></script>
  <script>
    window.onSpotifyWebPlaybackSDKReady = () => {
      const token = 'BQC6-LyaaBlt0FAsdoZA7zli_BKNM-xZ7jUThSbsmJgX9KY6cNIBFEac3-ZgAlveTuy2DcGtFZ7-aA1TqhbCqVOI8Zy1NazqByXof9K7aaqH4kzIoUhziEiSZ4nLaLbUw3jP6S_nG8JfU-RekIP_J5x4MSaP6llh5wCV';
      const player = new Spotify.Player({
        name: 'Web Playback SDK Quick Start Player',
        getOAuthToken: cb => { cb(token); }
      });

      // Error handling
      player.addListener('initialization_error', ({ message }) => { console.error(message); });
      player.addListener('authentication_error', ({ message }) => { console.error(message); });
      player.addListener('account_error', ({ message }) => { console.error(message); });
      player.addListener('playback_error', ({ message }) => { console.error(message); });

      // Playback status updates
      player.addListener('player_state_changed', state => { console.log(state); });

      // Not Ready
      player.addListener('not_ready', ({ device_id }) => {
        console.log('Device ID has gone offline', device_id);
      });

      // Ready
      player.addListener('ready', ({ device_id }) => {
        console.log('Ready with Device ID', device_id);

        document.getElementById("playButton").addEventListener("click", function(){

          const play = ({
            spotify_uri,
            playerInstance: {
              _options: {
                getOAuthToken,
                id
              }
            }
          }) => {
            getOAuthToken(access_token => {
              fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {
                method: 'PUT',
                body: JSON.stringify({ uris: spotify_uri }),
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${access_token}`
                },
              });
            });
          };

          var myJsArray = <%=raw track_ids%>;

          play({
            playerInstance: player,
            spotify_uri: myJsArray,
          });
      });

      document.getElementById("pauseButton").addEventListener("click", function(){

        const pause = ({
          playerInstance: {
            _options: {
              getOAuthToken,
              id
            }
          }
        }) => {
          getOAuthToken(access_token => {
            fetch(`https://api.spotify.com/v1/me/player/pause?device_id=${id}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${access_token}`
              },
            });
          });
        };

        pause({
          playerInstance: player,
        });
    });

    });
    // Connect to the player!
    player.connect();
  };

  </script>
</body>

<h2>Weather</h2>

<%= render 'weather', location: @location %>

<h2>My playlist</h2>

<button id="playButton">Play playlist</button>
<button id="pauseButton">Pause playlist</button>

<table>
  <tbody>
    <% @playlist.tracks.each do |track| %>
      <tr>
        <td><%= image_tag(track.image, size: 45) %></td>
        <td><%= track.name %></td>
        <td><%= track.artist %></td>
        <td><%= track.album %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<h3>Playlist stats</h3>

<dl>
  <dt>Number of tracks</dt>
  <dd><%= @playlist.size %></dd>
  <dt>Average valence</dt>
  <dd><%= @playlist.avg_valence %></dd>

  <dt>Max valence</dt>
  <dd><%= @playlist.max_valence %></dd>

  <dt>Min valence</dt>
  <dd><%= @playlist.min_valence %></dd>

  <dt>Valence distribution</dt>
  <dd><%= @playlist.valence_distribution.inspect %></dd>
</dl>
